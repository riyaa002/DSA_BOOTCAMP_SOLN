//Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]]
//for each 0 <= i < nums.length and return it.
//A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

class Solution {
    public int[] buildArray(int[] nums) {
        int[] ans = new int[nums.length];
        for(int i=0; i<nums.length; i++){
            ans[i] = nums[nums[i]];
        }
        return ans;
    }
}

// Given an integer array nums of length n, you want to create an array ans of length 2n
// where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed). Specifically, ans is the concatenation of two nums arrays.Return the array ans.

class Solution {
    public int[] getConcatenation(int[] nums) {
        int n = nums.length;
        int[] ans = new int[2*n];
        for (int i=0;i<n; i++){
            ans[i] = nums[i];
            ans[i + n] = nums[i];
        }
        return ans;
    }
}

//    Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]â€¦nums[i]). Return the running sum of nums.

class Solution {
    public int[] runningSum(int[] nums) {
        int[] runningSums = new int[nums.length];
        for (int i=1;i<nums.length;i++){
            runningSums[0]=nums[0];
            runningSums[i]=nums[i]+runningSums[i-1];
        }
        return runningSums;
    }
}

//Richest Customer Wealth
class Solution {
    public int maximumWealth(int[][] accounts) {
        int max = 0;
        for (int i=0; i<accounts.length; i++){
            int sum = 0;
            for(int j=0 ; j<accounts[i].length; j++){
                sum += accounts[i][j];
            }

            if (sum>max){
                max = sum;
            }
        }
        return max;
    }
}

// Contains Duplicate

class Solution {
    public boolean containsDuplicate(int[] nums) {
        for(int i=0; i<nums.length; i++){
            int n = nums[i];
            for (int j=i+1; j<nums.length; j++){
                if(nums[j]==n)
                    return true;
            }
        }
        return false;
    }
}
