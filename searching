//69. Sqrt(x)
//Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.

class Solution {
    public int mySqrt(int x) {

        if (x == 0) {
            return 0;
        }
        int first = 1, last = x;
        while (first <= last) {
            int mid = first + (last - first) / 2;
            if (mid == x / mid) {
                return mid;
            } else if (mid > x / mid) {
                last = mid - 1;
            } else {
                first = mid + 1;
            }
        }
        return last;
    }
}

//374. Guess Number Higher or Lower

public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int low=0,high=n;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            int x= guess(mid);
            if(x==0)
            {
                return mid;
            }
            else if(x==-1)
            {
                high=mid-1;
            }
            else
            {
                low = mid+1;
            }
        }
        return -1;
    }
}

//278. First Bad Version

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int start = 0, end=n;
        while(start<=end){
            int mid = start + (end - start)/2;
            if(isBadVersion(mid)==true){
                end = mid - 1;
            }
            else{
                start = mid + 1;
            }
        }
        return start;
    }
}

//167. Two Sum II - Input Array Is Sorted

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int[] ans = new int[2];
        int start = 0, end = numbers.length-1;
        while(start < end){
            int head = numbers[start];
            int tail = numbers[end];
            if(head + tail == target){
                break;
            } else if ((head + tail) > target) {
                end --;
            }else {
                start ++;
            }

        }
        ans[0] = start +1;
        ans[1] = end +1;
        return ans;
    }
}

//367. Valid Perfect Square
class Solution {
    public boolean isPerfectSquare(int num) {
        long start = 1, end = num;
        if(num==1)
            return true;
        while(start<= end){
            long mid = end + (start - end)/2;
            if((mid*mid) == num ){
                return true;
            } else if ((mid * mid) > num) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return false;
    }

}

//744. Find Smallest Letter Greater Than Target

class Solution {
    public char nextGreatestLetter(char[] letters, char target) {
          if (target >= letters[letters.length-1]){
            return letters[0];
        }
        int start = 0, end = letters.length;
        while(start<= end){

            int mid = start + (end - start)/2;
            if(letters[mid]>target){
                end = mid -1;
            }else if (letters[mid] < target){
                start = mid + 1;
            }else {
                start = mid + 1;
            }
        }
        return letters[start];
    }
}


//35. Search Insert Position

class Solution {
    public int searchInsert(int[] nums, int target) {
        if (target > nums[nums.length-1]){
            return nums.length ;
        }
        int start = 0, end = nums.length;
        while(start<= end){
            int mid = start + (end - start)/2;
            if(nums[mid]==target){
                return mid;
            }else if (nums[mid] < target){
                start = mid + 1;
            }else {
                end = mid -1;
            }
        }
        return start;
    }
}


//852. Peak Index in a Mountain Array
class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int start = 0, end = arr.length;
        while(start<= end){
            int mid = start + (end - start)/2;
            if(arr[mid] < arr[mid+1]){
                start = mid + 1;
            }else if (arr[mid] > arr[mid+1]){
                end = mid - 1;
            }
        }
        return start;
    }
}


//1351. Count Negative Numbers in a Sorted Matrix

class Solution {
    public int countNegatives(int[][] grid) {
        int count = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if(grid[i][j] < 0){
                    count+=1;
                }
            }
        }
        return count;
    }
}

//704. Binary Search

class Solution {
    public int search(int[] nums, int target) {
        if (target > nums[nums.length-1]){
            return -1 ;
        }
        int start = 0, end = nums.length;
        while(start<= end){
            int mid = start + (end - start)/2;
            if(nums[mid]==target){
                return mid;
            }else if (nums[mid] < target){
                start = mid + 1;
            }else {
                end = mid -1;
            }
        }
        return -1;
    }
}

//34. Find First and Last Position of Element in Sorted Array

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ans = {-1,-1};
        ans[0] = search(nums,target,true);
        ans [1] = search(nums,target,false);
        return ans;
    }
    public int search (int[] nums, int target, boolean findfirst){
        int ans = -1;
        int start = 0, end = nums.length - 1;
        while(start<= end){
            int mid = start + (end - start)/2;
            if(nums[mid] < target){
                start = mid + 1;
            } else if (nums[mid] > target){
                end = mid - 1;
            }else{
                ans = mid;
                if(findfirst){
                    end = mid - 1;
                }else {
                    start = mid + 1;
                }
            }
        }
        return ans;
    }
}


//33. Search in Rotated Sorted Array
class Solution {
    public int pivot(int[] nums){
        int start = 0, end = nums.length - 1;
        if (nums.length == 1) {
            return 0;
        }
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (mid < end && nums[mid] > nums[mid + 1]) {
                return mid;
            }
            if (mid > start && nums[mid] < nums[mid - 1]) {
                return mid - 1;
            }
            if (nums[mid] <= nums[start]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }
    public int search(int[] nums, int target){
        int ans = -1;
        int pivot = pivot(nums);
        int start = 0, end = nums.length - 1;
        if(nums.length == 1 && target == nums[0]){
            ans = 0;
            return ans;
        }
        if (pivot == -1) {
            ans = binarySearch(nums, target, 0, nums.length - 1);
            return ans;
        }
        if (nums[start] > target) {
            ans = binarySearch(nums, target, pivot + 1, end);
        } else {
            ans = binarySearch(nums, target, start, pivot);
        }
        return ans;
    }
    public int binarySearch(int[] nums, int target,int start, int end) {
        int ans = -1;
        while(start<= end){
            int mid = start + (end - start)/2;
            if(nums[mid] < target){
                start = mid + 1;
            } else if (nums[mid] > target){
                end = mid - 1;
            }else{
                ans = mid;
                start = mid + 1;
            }
        }
        return ans;
    }
}


//153. Find Minimum in Rotated Sorted Array
class Solution {
    public int findMin(int[] nums) {
        int pivot = pivot(nums);
            if(nums.length == 1){
                return nums[0];
            }
            if(pivot == -1){
                return nums[0];
            }
            else {
                return nums[pivot + 1];
            }
    }
    static int pivot(int[] nums){
            int start = 0, end = nums.length - 1;
            if (nums.length == 1) {
                return 0;
            }
            while (start <= end) {
                int mid = start + (end - start) / 2;
                if (mid < end && nums[mid] > nums[mid + 1]) {
                    return mid;
                }
                if (mid > start && nums[mid] < nums[mid - 1]) {
                    return mid - 1;
                }
                if (nums[mid] <= nums[start]) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            }
            return -1;
        }
}

//74. Search a 2D Matrix

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int r = 0;
        int c = matrix[r].length - 1;
        while (r < matrix.length && c >= 0){
            if(matrix[r][c] == target){
                return true;
            } else if (matrix[r][c] > target) {
                c -= 1;
            }else {
                r += 1;
            }
        }
        return false;
    }
}